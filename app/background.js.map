{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"electron\"","webpack:///external \"lodash\"","webpack:///./src/lib/pouch.js","webpack:///external \"path\"","webpack:///external \"fs-extra\"","webpack:///external \"electron-is-dev\"","webpack:///external \"curl\"","webpack:///external \"pouchdb\"","webpack:///external \"url\"","webpack:///external \"electron-window-state\"","webpack:///external \"electron-settings\"","webpack:///./src/menu/lib_menu_template.js","webpack:///./src/menu/about_menu_template.js","webpack:///./src/menu/dict_menu_template.js","webpack:///./src/menu/help_menu_template.js","webpack:///./src/background.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","__webpack_exports__","cleanupDB","getPossible","checkCfg","infoNewDB","replicateDB","replicate","remoteDictsList","lodash__WEBPACK_IMPORTED_MODULE_0__","lodash__WEBPACK_IMPORTED_MODULE_0___default","path","fse","curl","settings","log","console","PouchDB","dbs","state","keys","length","cfg","_","compact","map","cf","active","forEach","dn","idx","dpath","resolve","upath","pouch","dname","weight","push","setDBs","Promise","all","db","allDocs","include_docs","then","res","rows","Error","rdocs","row","doc","docs","flatten","rdoc","catch","err","queryDBs","version","destpath","fns","readdirSync","set","createZeroCfg","localpath","localDB","info","close","join","dbname","cb","remotepath","remoteDB","to","result","body","statusCode","rdbs","JSON","parse","libMenuTemplate","label","submenu","accelerator","click","BrowserWindow","getFocusedWindow","webContents","send","app","quit","aboutMenuTemplate","dictMenuTemplate","helpMenuTemplate","toggleDevTools","windowStateKeeper","env","userDataPath","getPath","setPath","on","menus","Menu","setApplicationMenu","buildFromTemplate","mainWindowState","defaultWidth","defaultHeight","win","x","y","width","height","webPreferences","nodeIntegration","loadURL","url","format","pathname","__dirname","protocol","slashes","openDevTools","pckg","setTitle","globalShortcut","register","reload","apath","getAppPath","ipcMain","event","arg"],"mappings":"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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"electron\");","module.exports = require(\"lodash\");","import _ from 'lodash'\n// import { remote } from \"electron\";\n// import { replicate } from \"../../../replicator.js\";\n\nconst path = require('path')\nconst fse = require('fs-extra')\nconst curl = require('curl')\n// const app = remote.app;\n// const apath = app.getAppPath()\n// const upath = app.getPath(\"userData\")\n\nconst settings = require('electron-settings')\nconst log = console.log\nconst PouchDB = require('pouchdb')\nconst isDev = require('electron-is-dev')\n\nlet dbs = []\n// let pouchpath = path.resolve(upath, 'pouch')\n// fse.ensureDirSync(pouchpath)\n\nexport function cleanupDB(state) {\n  log('CLEAN UP')\n}\n\nexport function getPossible(keys) {\n  if (!dbs.length) setDBs()\n  return queryDBs(keys)\n}\n\nexport function queryDBs (keys) {\n  return Promise.all(dbs.map(function (db) {\n    return db.allDocs({\n      keys: keys,\n      include_docs: true\n    })\n      .then(function (res) {\n        if (!res || !res.rows) throw new Error('no dbn result')\n        let rdocs = _.compact(res.rows.map(row => { return row.doc }))\n        let docs = _.flatten(_.compact(rdocs.map(rdoc => { return rdoc.docs })))\n        if (!docs.length) return []\n        docs.forEach(doc => { doc.dname = db.dname, doc.weight = db.weight })\n        return docs\n      }).catch(function (err) {\n        console.log('ERR GET DBs', err)\n      })\n  }))\n}\n\nexport function checkCfg() {\n  let cfg = settings.get('cfg')\n  if (!cfg) cfg = createZeroCfg(upath)\n  return cfg\n}\n\nfunction createZeroCfg(upath, version) {\n  let destpath = path.resolve(upath, 'pouch')\n  let fns = fse.readdirSync(destpath)\n\n  let cfg = []\n  fns.forEach((dn, idx) => {\n    if (dn == 'cfg.json') return\n    let dpath = path.resolve(destpath, dn)\n    let cf = {name: dn, active: true, idx: idx}\n    cfg.push(cf)\n  })\n  settings.set('cfg', cfg)\n  log('__ZERO CFG__', cfg)\n  return cfg\n}\n\n// а если новая база?\nexport function setDBs() {\n  let cfg = settings.get('cfg')\n  log('===setDBs CFG===', cfg)\n  let dbnames = _.compact(cfg.map(cf => { return (cf.active) ? cf.name : null }))\n  // log('DBNS', dbnames)\n  dbnames.forEach((dn, idx) => {\n    let dpath = path.resolve(upath, 'pouch', dn)\n    let pouch = new PouchDB(dpath)\n    pouch.dname = dn\n    pouch.weight = idx\n    dbs.push(pouch)\n  })\n\n  // let localDB = dbs[0]\n  // let remoteDB = new PouchDB('http://localhost:5984/vasilyev')\n  // localDB.replicate.to(remoteDB).on('complete', function () {\n  //   log('yay, were done!')\n  // }).on('error', function (err) {\n  //   log('boo, something went wrong!', err)\n  // })\n}\n\n// adduser --system --home /opt/couchdb --no-create-home --shell /bin/bash -g couchdb couchdb\n// useradd --system -b /opt/couchdb --shell /bin/bash -g couchdb couchdb\n// sudo -i -u couchdb bin/couchdb\n// lobsang vasilyev\n\nexport function infoNewDB(upath) {\n  let localpath = path.resolve(upath, 'pouch', 'vasilyev')\n  let localDB = new PouchDB(localpath)\n  localDB.info().then(function (info) {\n    log('LOCAL INFO', info);\n    localDB.close()\n  })\n  let remotepath = ['http://localhost:5984', 'vasilyev'].join('/')\n  // let remoteDB = new PouchDB(remotepath)\n\n  // remoteDB.info().then(function (info) {\n  //   // log('REMOTE INFO', info);\n  //   remoteDB.close()\n  // })\n\n}\n\nexport function replicateDB(dbname, cb) {}\n\nexport function replicate(remotepath, localpath, cb) {\n  let localDB = new PouchDB(localpath)\n  // localDB.dname = dbname\n  let remoteDB = new PouchDB(remotepath)\n\n  remoteDB.replicate.to(localDB).then(function (result) {\n    log('REPLICATION COMPLETED', result);\n    cb(true)\n  }).catch(function (err) {\n    log(err);\n    cb(false)\n  });\n  return\n\n  // var db = new PouchDB('http://example.com/dbname', {\n  //   fetch: function (url, opts) {\n  //     opts.headers.set('X-Some-Special-Header', 'foo');\n  //     return PouchDB.fetch(url, opts);\n  //   }\n  // });\n\n\n  // replicate(remotepath, localpath, function(res) {\n  //   log('HERE RES', res)\n  //   cb(res)\n  // })\n  // return\n\n  // let remoteDB = new PouchDB(remotepath, {\n  //   ajax: {\n  //     method: 'POST',\n  //     mode: 'cors',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       'withCredentials' : true\n  //     },\n  //     credentials: 'include',\n  //     withCredentials: true\n  //   }\n  // });\n  // remoteDB.info().then(function (info) {\n  //   log('REMOTE INFO', info);\n  // })\n\n  log('LOCALPATH', localpath)\n  log('REMOTEPATH', remotepath)\n\n  remoteDB.replicate.to(localDB).on('complete', function (res) {\n    log('ok, were done!', res)\n  }).on('error', function (err) {\n    log('boo, something went wrong!', err)\n  })\n\n  return\n\n  // localDB.replicate.from(remoteDB)\n  //   .on('complete', function(info) {\n  //     // then two-way, continuous, retriable sync\n  //     log('SYNC', info)\n  //   }).on('error', log('ERR'));\n\n  localDB.replicate.from(remoteDB, {batch_size: 1000})\n    .on('complete', function (info) {\n      log('REPL', info)\n      cb(true)\n    }).on('error', function (err) {\n      // handle error\n      log('____ERR', err)\n      cb(false)\n    })\n\n  return\n\n  remoteDB.replicate.to(localDB).then(function (result) {\n    log('REPLICATION COMPLETED', result);\n    cb(true)\n  }).catch(function (err) {\n    log(err);\n    cb(false)\n  });\n\n  // remoteDB.replicate.to(localDB, {batch_size: 1000}).then(function (result) {\n  //   log('REPLICATION COMPLETED', result);\n  //   cb(true)\n  // }).catch(function (err) {\n  //   log(err);\n  //   cb(false)\n  // });\n\n  return\n\n  remoteDB.info().then(function (info) {\n    log('REMOTE INFO', info);\n    cb(true)\n  })\n  // let replication = localDB.replicate.from(remoteDB, {live: false, batch_size: 1000, batches_limit: 30}) .on('change', function (info) { console.log('change event'); console.log(info); }).on('complete', function (info) { console.log('complete event'); console.log(info); }).on('error', function (err) { console.log('error event'); console.log(err); });\n  // return\n\n  // localDB.sync(remoteDB) //No options here -> One time sync\n  //   .on('complete', (info) => {\n  //     log('SYNC', info)\n  //   });\n  log('BEFORE REMOTE');\n\n  remoteDB.replicate.to(localDB, {batch_size: 1000, batches_limit: 30}).then(function (result) {\n    log('REPLICATION COMPLETED', result);\n    cb(true)\n  }).catch(function (err) {\n    log(err);\n    cb(false)\n  });\n  return\n\n  var rep = PouchDB.replicate(remoteDB, localDB, {\n    // live: true,\n    // retry: true\n  }).on('change', function (info) {\n    log('change', info)\n  }).on('paused', function (err) {\n    log('paused', err)\n  }).on('active', function (res) {\n    log('active', res)\n  }).on('denied', function (err) {\n    log('denied', err)\n  }).on('complete', function (info) {\n    log('complete', info)\n  }).on('error', function (err) {\n    log('error', err)\n  });\n\n  return\n\n  localDB.info().then(function (info) {\n    log('LOCAL INFO', info);\n    remoteDB.replicate.to(localDB).on('complete', function () {\n      log('ok, DB cloned to', localpath)\n      cb(true)\n    }).on('error', function (err) {\n      log('something went wrong!', err)\n      cb(false)\n    })\n  })\n}\n\nexport function remoteDictsList(cb) {\n  let url = 'http://localhost:5984/_all_dbs'\n  let error = 'something goes wrong, no connection?'\n  curl.get(url, {}, function(err, res, body) {\n    if (err) {\n      cb(error)\n      return\n    }\n    if (res.statusCode == 200) {\n      try {\n        let rdbs = JSON.parse(body)\n        cb(rdbs)\n      } catch(err) {\n        cb(err)\n      }\n    }\n    else cb(res.statusCode)\n  });\n}\n","module.exports = require(\"path\");","module.exports = require(\"fs-extra\");","module.exports = require(\"electron-is-dev\");","module.exports = require(\"curl\");","module.exports = require(\"pouchdb\");","module.exports = require(\"url\");","module.exports = require(\"electron-window-state\");","module.exports = require(\"electron-settings\");","import { app, BrowserWindow } from \"electron\";\n\nexport const libMenuTemplate = {\n  label: \"File\",\n  submenu: [\n    {  label: \"Home\",\n       accelerator: \"CmdOrCtrl+L\",\n       click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'home') } },\n    { label: \"Quit\",\n      accelerator: \"CmdOrCtrl+Q\",\n      click: () => {\n        app.quit();\n      }\n    }\n  ]\n}\n","import { app, BrowserWindow } from \"electron\";\n\nexport const aboutMenuTemplate = {\n  label: \"About\",\n  submenu: [\n    { label: \"What does this program do?\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'about') } },\n    { label: \"Code and Download\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'code') } },\n    { label: \"License\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'license') } },\n    { label: \"Acknowledgements\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'acknowledgements') } }\n  ]\n};\n","import { app, BrowserWindow } from \"electron\";\n\nexport const dictMenuTemplate = {\n  label: \"Dict\",\n  submenu: [\n    { label: \"clone dicts from server\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'clonedicts') } },\n    { label: \"arrange local dicts\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'arrangeDicts') } },\n    { label: \"export CSV to dict\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'csv') } },\n    { label: \"create CSV dict from texts\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'localdict') } },\n    { label: \"upload dict to server (disabled)\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'upload') } },\n    { label: \"cleanup DBs completely\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'cleanupdb') } }\n  ]\n};\n","import { app, BrowserWindow } from \"electron\";\n\nexport const helpMenuTemplate = {\n  label: \"Help\",\n  submenu: [\n    // { label: \"how to create a book\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'howto-create') } },\n    // { label: \"how to create a dictionary\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'howto-dict') } },\n    { label: \"hot keys\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('action', 'hotkeys') } },\n    { label: \"Toggle DevTools\",\n      accelerator: \"Alt+CmdOrCtrl+I\",\n      click: () => {\n        BrowserWindow.getFocusedWindow().toggleDevTools();\n      }\n    }\n  ]\n};\n","// This is main process of Electron, started as first thing when your\n// app starts. It runs through entire life of your application.\n// It doesn't have any windows which you can see on screen, but we can open\n// window from here.\n\nimport path from \"path\";\nimport url from \"url\";\nimport { app, BrowserWindow, Menu, ipcMain, globalShortcut } from \"electron\";\nimport { libMenuTemplate } from \"./menu/lib_menu_template\";\nimport { aboutMenuTemplate } from \"./menu/about_menu_template\";\nimport { dictMenuTemplate } from \"./menu/dict_menu_template\";\nimport { helpMenuTemplate } from \"./menu/help_menu_template\";\nimport { replicate } from \"./lib/pouch\";\n\nimport { devMenuTemplate } from \"./menu/dev_menu_template\";\nimport { editMenuTemplate } from \"./menu/edit_menu_template\";\n// import createWindow from \"./helpers/window\";\nconst windowStateKeeper = require('electron-window-state');\nconst settings = require('electron-settings');\n\n// Special module holding environment variables which you declared\n// in config/env_xxx.json file.\nimport env from \"env\";\n\nconst setApplicationMenu = () => {\n  // const menus = [libMenuTemplate, fileMenuTemplate, aboutMenuTemplate, authMenuTemplate, helpMenuTemplate];\n  // const menus = [libMenuTemplate, aboutMenuTemplate, helpMenuTemplate];\n  const menus = [libMenuTemplate, dictMenuTemplate, aboutMenuTemplate, helpMenuTemplate];\n  if (env.name !== \"production\") {\n    // menus.push(devMenuTemplate);\n  }\n  Menu.setApplicationMenu(Menu.buildFromTemplate(menus));\n};\n\n// Save userData in separate folders for each environment.\n// Thanks to this you can use production and development versions of the app\n// on same machine like those are two separate apps.\nif (env.name !== \"production\") {\n  const userDataPath = app.getPath(\"userData\");\n  app.setPath(\"userData\", `${userDataPath} (${env.name})`);\n}\n\napp.on(\"ready\", () => {\n  setApplicationMenu();\n\n  let mainWindowState = windowStateKeeper({\n    defaultWidth: 1000,\n    defaultHeight: 800\n  });\n\n  const win = new BrowserWindow({\n    'x': mainWindowState.x,\n    'y': mainWindowState.y,\n    'width': mainWindowState.width,\n    'height': mainWindowState.height,\n    webPreferences: {\n      nodeIntegration: true\n    }\n  });\n\n  win.loadURL(\n    url.format({\n      pathname: path.join(__dirname, \"app.html\"),\n      protocol: \"file:\",\n      slashes: true\n    })\n  );\n\n  if (env.name === \"development\") {\n    win.openDevTools();\n  }\n\n  win.webContents.on('did-finish-load', () => {\n    let pckg = require('../package.json')\n    let name = pckg.name\n    let version = pckg.version\n    // let aversion = pckg.dependencies.antrax.replace('^', '')\n    win.webContents.send('version', version )\n    win.setTitle([name, 'v.', version].join(' '))\n  })\n\n  win.on('resize', function () {\n    win.webContents.send('reload')\n  })\n\n\n  globalShortcut.register('CommandOrControl+R', () => win.webContents.send('reread'));\n  // globalShortcut.register('CommandOrControl+R', () => win.reload());\n  globalShortcut.register('CommandOrControl+Shift+R', () => win.reload());\n  // globalShortcut.register('CommandOrControl+R', () => win.reload());\n\n  const apath = app.getAppPath()\n  const upath = app.getPath(\"userData\")\n  let localpath = path.resolve(upath, 'pouch', 'vasilyev')\n  let remotepath = ['http://localhost:5984', 'vasilyev'].join('/')\n\n  console.log('APATH', apath, 'UPATH', upath)\n\n  ipcMain.on('replicate', (event, arg) => {\n    console.log('PING', arg) // prints \"ping\"\n    replicate(remotepath, localpath, function(res) {\n      console.log('REPL RES:', res)\n    })\n    // event.sender.send('asynchronous-reply', 'pong')\n  })\n\n\n})\n\n\n\napp.on(\"window-all-closed\", () => {\n  app.quit();\n});\n"],"sourceRoot":""}