{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"electron\"","webpack:///external \"lodash\"","webpack:///./src/lib/tibetan_data.js","webpack:///external \"path\"","webpack:///external \"speckled-band\"","webpack:///external \"electron-settings\"","webpack:///external \"fs-extra\"","webpack:///external \"electron-is-dev\"","webpack:///external \"mississippi\"","webpack:///external \"fast-csv\"","webpack:///external \"pouchdb\"","webpack:///external \"stream\"","webpack:///external \"pouchdb-load\"","webpack:///external \"url\"","webpack:///external \"glob-stream\"","webpack:///external \"multistream\"","webpack:///external \"debug\"","webpack:///external \"csv2\"","webpack:///external \"node-couchdb\"","webpack:///./src/menu/lib_menu_template.js","webpack:///./src/menu/about_menu_template.js","webpack:///./src/menu/dict_menu_template.js","webpack:///./src/menu/help_menu_template.js","webpack:///./src/dbs/segmenter.js","webpack:///./src/dbs/csv2pouch.js","webpack:///./src/dbs/glob2csv.js","webpack:///./src/dbs/pouch.js","webpack:///./src/background.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","__webpack_exports__","tibsyms","tibsuff","tsek","libMenuTemplate","label","submenu","accelerator","click","BrowserWindow","getFocusedWindow","webContents","send","app","quit","aboutMenuTemplate","dictMenuTemplate","helpMenuTemplate","toggleDevTools","console","log","fse","miss","csv","path","PouchDB","stream","retsek","RegExp","_","gs","MultiStream","code","glob2csv","globpath","rs","cwd","nodir","toTibetan","through","obj","data","enc","cb","fpath","readFile","then","text","tibs","tibkey","rows","trim","split","compact","forEach","row","idx","clean","replace","cleanStr","gpars","sband","spans","span","lang","wfs","wf","push","catch","err","selectTib","slice","length","rs2","Readable","objectMode","_read","toDict","next","recQuery","query","queryDBs","res","chain","sec","docs","seg","str","toStr","pipe","process","stdout","toString","settings","plugin","dbs","startkey","endkey","NodeCouchDb","diglossa","host","protocol","port","auth","user","pass","onSyncChange","onSyncError","ensureCfg","upath","cfg","dict","active","dpath","resolve","dname","pouch","weight","map","db","setDBs","set","pouchpath","ensureDirSync","setCfg","find","newdict","keys","pdchs","segs","depth","old","rec","pdch","head","tail","flakes","flake","reverse","scrape","flatten","join","clone","pop","cleans","segmenter","keyres","mainKeys","uniq","added","syl","resyl","poss","main","totalKeys","compound","filter","concat","Promise","all","allDocs","include_docs","Error","rdocs","doc","rdoc","chains","bests","full","fulls","any","segdocs","reh","includes","startWith","selectBests","makeChains","ambitmp","first","ambi","adocs","commonParts","compactDocs","max","sum","segment","longests","min","importCSV","jsonpath","readJson","manifest","dbpath","descr","readJsonSync","_id","dirpath","parse","dir","csvpath","pathExistsSync","createReadStream","csvStream","comment","ignoreEmpty","on","row2doc","trns","emptyDirSync","buff","pouchPushStream","Writable","constructor","options","super","this","_write","chunk","encoding","bulkDocs","highWaterMark","put","csv2pouch","csvDB","delCfg","env","userDataPath","getPath","setPath","menus","Menu","setApplicationMenu","buildFromTemplate","win","webPreferences","nodeIntegration","winBounds","getBounds","y","setBounds","loadURL","url","format","pathname","__dirname","slashes","openDevTools","pckg","version","setTitle","globalShortcut","register","reload","apath","getAppPath","ipcMain","event","info","infoDB","sender","csvname","trn","JSON","stringify","filename","filepath","manipath","writeFile","writeJson","error","exportCSV","scanDirectory","listDatabases","dnames","remotepath","db_name","size","doc_count","rdbs","localpath","localDB","dumppath","load","sync","live","retry","replicate","datapath","removeSync","cleanupDB"],"mappings":"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","file":"background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 28);\n","module.exports = require(\"electron\");","module.exports = require(\"lodash\");","//\n\nexport const tibsyms = {\n  tsek: '་'\n  // connective: 'འི',\n  // subordinative: 'ར', // ladon\n  // narrative: 'འོ',\n  // interrog: 'འམ',\n  // coupling: 'འི',\n  // ergative: 'ས',\n  // concessive: 'འང'\n}\n\nexport const tibsuff = ['འི', 'ར', 'འོ', 'འམ', 'འི', 'ས', 'འང']\n","module.exports = require(\"path\");","module.exports = require(\"speckled-band\");","module.exports = require(\"electron-settings\");","module.exports = require(\"fs-extra\");","module.exports = require(\"electron-is-dev\");","module.exports = require(\"mississippi\");","module.exports = require(\"fast-csv\");","module.exports = require(\"pouchdb\");","module.exports = require(\"stream\");","module.exports = require(\"pouchdb-load\");","module.exports = require(\"url\");","module.exports = require(\"glob-stream\");","module.exports = require(\"multistream\");","module.exports = require(\"debug\");","module.exports = require(\"csv2\");","module.exports = require(\"node-couchdb\");","import { app, BrowserWindow } from \"electron\";\n\nexport const libMenuTemplate = {\n  label: \"File\",\n  submenu: [\n    {  label: \"Home\",\n       accelerator: \"CmdOrCtrl+L\",\n       click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'home') } },\n    { label: \"Quit\",\n      accelerator: \"CmdOrCtrl+Q\",\n      click: () => {\n        app.quit();\n      }\n    }\n  ]\n}\n","import { app, BrowserWindow } from \"electron\";\n\nexport const aboutMenuTemplate = {\n  label: \"About\",\n  submenu: [\n    { label: \"About Pecha.js\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'about') } },\n    { label: \"Code and Download\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'code') } },\n    { label: \"License\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'license') } },\n    { label: \"Contacts\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'contacts') } },\n    { label: \"Acknowledgements\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'acknowledgements') } }\n  ]\n};\n","import { app, BrowserWindow } from \"electron\";\n\nexport const dictMenuTemplate = {\n  label: \"Dict\",\n  submenu: [\n    { label: \"Clone dicts from server\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'clonedicts') } },\n    { label: \"Import form CSV\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'csv') } },\n    { label: \"Arrange local dicts\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'activedicts') } },\n    { label: \"Create CSV from some texts\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'localdict') } },\n    { label: \"Publish new dictionary (disabled)\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'publish') } },\n    { label: \"Cleanup DBs completely\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'cleanup') } }\n  ]\n};\n","import { app, BrowserWindow } from \"electron\";\n\nexport const helpMenuTemplate = {\n  label: \"Help\",\n  submenu: [\n    { label: \"hot keys\", click: () => { BrowserWindow.getFocusedWindow().webContents.send('section', 'help') } },\n    { label: \"Toggle DevTools\",\n      accelerator: \"Alt+CmdOrCtrl+I\",\n      click: () => {\n        BrowserWindow.getFocusedWindow().toggleDevTools();\n      }\n    }\n  ]\n};\n","import _ from 'lodash'\nimport { tibsyms, tibsuff } from \"../lib/tibetan_data\";\n\nconst log = console.log\nconst tsek = tibsyms.tsek\n\nexport function totalKeys(pdchs) {\n  let mainKeys = _.uniq(_.flatten(pdchs))\n  let added = []\n  mainKeys.forEach(seg=>{\n    tibsuff.forEach(syl=>{\n      let resyl = new RegExp(syl+'$')\n      let poss = seg.replace(resyl, '')\n      if (seg != poss) added.push(poss)\n    })\n  })\n  return {main: mainKeys, added: added}\n  // let keys = segs.concat(added)\n  // return _.uniq(keys)\n  // return _.uniq(_.flatten(pdchs))\n}\n\nexport function segmenter(str) {\n  let segs = str.split(tsek)\n  // let depth = (segs.length < 10) ? 10 : 2\n  // let depth = (segs.length > 10) ? 7 : 100\n  let depth = 4\n  // log('SEGS', segs)\n  let old = str\n  let size = segs.length\n  let pdchs = [[segs]]\n  function rec(segs, pdch) {\n    // log('PDCH', pdch)\n    let flakes = scrape(segs)\n    flakes.forEach(flake => {\n      pdch.push(flake.head)\n      pdch.push(flake.tail)\n      // pdch = pdch.concat(flake.head)\n      // pdch = pdch.concat(flake.tail)\n      if (_.flatten(pdch).join(tsek) == old) {\n        pdchs.push(_.clone(pdch))\n        pdch.pop()\n      }\n      if (pdch.length < depth) rec(flake.tail, pdch) // three parts for now !\n      // rec(flake.tail, pdch)\n      pdch.pop()\n    })\n  }\n  rec(segs, [])\n  let cleans = []\n  pdchs.forEach(pdch=> {\n    let clean = []\n    pdch.forEach(seg=>{\n      clean.push(seg.join(tsek))\n    })\n    cleans.push(clean)\n  })\n  return cleans\n}\n\nfunction scrape(segs) {\n  // log('SEGS', segs)\n  let head, tail\n  let flakes = []\n  for (let idx = 1; idx < segs.length + 1; idx++) {\n    head = segs.slice(0, idx)\n    tail = segs.slice(idx)\n    let flake = {head: head, tail: tail}\n    if (tail.length) flakes.push(flake)\n  }\n  return flakes.reverse()\n}\n","//\n\nconst log = console.log\nconst fse = require('fs-extra')\nconst miss = require('mississippi')\nconst csv = require(\"fast-csv\");\nconst path = require('path')\nconst PouchDB = require('pouchdb')\nconst stream = require(\"stream\")\n\nlet tsek = '་'\nlet retsek = new RegExp(tsek+'$')\n\nexport function csv2pouch(jsonpath, dbpath) {\n  let descr = fse.readJsonSync(jsonpath)\n  descr._id = 'description'\n  let dirpath = path.parse(jsonpath).dir\n  let csvpath = path.resolve(dirpath, descr.path)\n  log('csvpath', csvpath)\n  log('csvpath', fse.pathExistsSync(csvpath))\n  if (!fse.pathExistsSync(csvpath)) return ''\n  let rs = fse.createReadStream(csvpath);\n\n  let csvopts = {\n    comment: '#',\n    trim: true,\n    ignoreEmpty: true\n  }\n\n  let csvStream = csv(csvopts)\n      .on(\"end\", function() {\n        // log(\"CSV end\")\n      })\n      .on(\"error\", function(err) {\n        log(\"CSV STEREAM ERR\", err)\n      })\n\n  const row2doc = miss.through.obj(\n    function (row, enc, cb) {\n      let dict = row[0].replace(retsek, '')\n      let mdoc = {dict: dict, trns: row.slice(1).join('').trim().split('; ') }\n      let doc = {_id: dict, docs: [mdoc] }\n      cb(null, doc)\n    }\n  )\n\n  // let dbpath = path.resolve(dirpath, 'db-stream')\n  // let ws = fse.createWriteStream(dbpath)\n\n  fse.emptyDirSync(dbpath)\n  let db = new PouchDB(dbpath)\n\n  let streamopts = {\n    objectMode: true,\n    highWaterMark: 3\n  }\n\n  let buff = []\n\n  class myWritable extends stream.Writable {\n    constructor(options){\n      super(options)\n      this.buff = []\n    }\n\n    _write(chunk, encoding, next){\n      if (buff.length < 2) {\n        buff.push(chunk)\n        next()\n      } else {\n        buff.push(chunk)\n        db.bulkDocs(buff)\n          .then(function(res) {\n            buff = []\n            next()\n          })\n          .catch(function (err) {\n            next(err, null)\n          });\n      }\n    }\n  }\n\n  let pouchPushStream = new myWritable(streamopts)\n\n  return rs.pipe(csvStream).pipe(row2doc).pipe(pouchPushStream)\n    .on('finish', function (err) {\n      return db.bulkDocs(buff)\n        .then(function() {\n          db.put(descr)\n        })\n        .catch(function (err) {\n          log('PUT DESCR ERR', err)\n        });\n\n    })\n    .on('error', function(err) {\n      log('__stream final_err', err)\n    })\n}\n","//\n\nconst _ = require('lodash')\nconst log = console.log\nconst fse = require('fs-extra')\nconst miss = require('mississippi')\nconst csv = require(\"fast-csv\");\nconst path = require('path')\n// const PouchDB = require('pouchdb')\nimport { segmenter, totalKeys } from \"./segmenter\"\nimport sband from \"speckled-band\"\nconst stream = require(\"stream\")\nconst gs = require('glob-stream');\nconst MultiStream = require('multistream')\nimport { queryDBs } from \"./pouch\"\n\nlet code  = 'tib'\nimport { tibsyms, tibsuff } from \"../lib/tibetan_data\"\nconst tsek = tibsyms.tsek\nlet retsek = new RegExp(tsek+'$')\n\nexport function glob2csv(globpath) {\n  let rs = gs(['**/*', '!**/*localDict.csv'], { cwd: globpath, nodir: true })\n  // let wspath = path.resolve(globpath, 'db-stream')\n  // let ws = fse.createWriteStream(wspath)\n\n  const toTibetan = miss.through.obj((data, enc, cb) => {\n    selectTib(data.path)\n      .then(function(wfs) {\n        // log('d', data.path)\n        // log('_wfs_', wfs.length)\n        wfs = wfs.slice(0,3)\n        if (wfs.length) cb(null, wfs);\n        else cb()\n      }).catch(function(err) {\n        log('WFS-ERR', err)\n      })\n  })\n\n  let rs2 = stream.Readable({objectMode: true})\n  rs2._read = () => {}\n\n  function recQuery(query) {\n    function decide(res) {\n      if (!res.chain) return\n      res.chain.forEach(sec=> {\n        if (sec.docs.length) rs2.push(sec.seg) // log('______sec.seg', sec.seg)// saveChunk(sec.seg) //dicts.push(sec.seg)\n        else {\n          if (query.str != sec.seg) return recQuery({ str: sec.seg })\n        }\n      })\n    }\n    return queryDBs(query).then(decide);\n  }\n\n  const toDict = miss.through.obj((wfs, enc, next) => {\n    let idx = 0\n    wfs.forEach(wf=> {\n      let query = {str: wf}\n      recQuery(query)\n        .catch(function(err) {\n          console.log('Q-ERR', err)\n        })\n    })\n    next()\n  })\n\n  const toDict_ = miss.through.obj((wfs, enc, next) => {\n    let idx = 0\n    function factory (cb) {\n      wfs.forEach(wf=> {\n        log('____wf', wf)\n        let query = {str: wf}\n\n        queryDBs(query)\n          .then(function(res) {\n            // log('____res', res)\n            if (!res.chain) return cb()\n            let rs = stream.Readable({objectMode: true})\n            rs._read = () => {}\n            res.chain.forEach(sec=> {\n              if (sec.docs.length) rs.push(sec.seg), cb(null, rs)\n              else {\n                // if (query.str != sec.seg) return factory(cb)\n              }\n            })\n          })\n\n        // setTimeout(function () {\n        //   let rs = stream.Readable({objectMode: true})\n        //   rs._read = () => {}\n        //   rs.push(wf)\n        //   if (idx == 0)\n        //     idx++, factory (cb)\n        //   else\n        //     cb(null, rs)\n        // }, 100)\n      })\n    }\n    // MultiStream(factory).pipe(process.stdout)\n    MultiStream(factory).pipe(toStr).pipe(process.stdout)\n    next()\n  })\n\n  const toStr = miss.through.obj((data, enc, cb) => {\n    // let json = JSON.stringify(data) + '\\n'\n    let str = data.toString() + '\\n'\n    // log('json:', json)\n    cb(null, str);\n  })\n\n  // rs.pipe(toStr).pipe(process.stdout);\n  // rs.pipe(toTibetan).pipe(toStr).pipe(process.stdout);\n  rs.pipe(toTibetan).pipe(toDict)\n  rs2.pipe(toStr).pipe(process.stdout);\n}\n\nfunction selectTib(fpath) {\n  return fse.readFile(fpath,'utf8')\n    .then(function(text) {\n      if (!text) return\n      let tibs = []\n      let tibkey = {}\n      let rows = text.trim().split('\\n')\n      rows = _.compact(rows)\n      rows.forEach((row, idx)=> {\n        let clean = cleanStr(row)\n        // if (idx > 0) return\n        let gpars = sband(clean, code)\n        if (!gpars) return\n        gpars.forEach(spans=> {\n          spans.forEach(span=> {\n            if (span.lang != code) return\n            let wfs = span.text.split(' ')\n            wfs.forEach(wf=> {\n              wf = wf.replace(retsek, '')\n              if (tibkey[wf]) return\n              tibs.push(wf)\n              tibkey[wf] = true\n            })\n          })\n        })\n      })\n      // log('___XXXX', tibs.length)\n      return tibs\n    })\n    .catch(function(err) {\n      log('selectTib-ERR', err)\n    })\n}\n\nfunction cleanStr(row) {\n  let clean = row.trim()\n  clean = clean.trim().replace(/\\.$/, '')\n  return clean\n}\n","//\n\nimport _ from 'lodash'\nimport sband from \"speckled-band\"\nimport { segmenter, totalKeys } from \"./segmenter\";\nimport { tibsyms, tibsuff } from \"../lib/tibetan_data\";\nimport { csv2pouch } from './csv2pouch'\nimport { glob2csv } from './glob2csv'\n\nconst tsek = tibsyms.tsek\nlet retsek = new RegExp(tsek+'$')\n\n// const JSON = require('json5')\n// require('json5/lib/register')\n\n// const request = require('request')\nconst path = require('path')\nconst fse = require('fs-extra')\n// let glob = require(\"glob\")\n\nconst isDev = require('electron-is-dev')\nconst settings = require('electron-settings')\nlet PouchDB = require('pouchdb')\nlet load = require('pouchdb-load');\nPouchDB.plugin(require('pouchdb-load'));\n\n// let Remote = require('pouch-remote-stream');\n// PouchDB.adapter('remote', Remote.adapter);\n\nconst log = console.log\nlet debug = require('debug')\n// let d = debug('app')\n// let miss = require('mississippi');\nlet csv2 = require('csv2');\n\nlet dbs = []\nlet code = 'tib'\nlet startkey =  'ཀ'\nlet endkey = '\\ufff0'\n// let csvDB\n\nconst NodeCouchDb = require('node-couchdb');\nconst couch = new NodeCouchDb()\n\nconst diglossa = new NodeCouchDb({\n  host: 'diglossa.org',\n  protocol: 'http',\n  port: 5984,\n  auth: {\n    user: 'guest',\n    pass: 'guest'\n  }\n})\n\nexport function remoteDicts() {\n  return diglossa.listDatabases()\n    .then(function(dnames) {\n      return Promise.all(dnames.map(function(dname) {\n        let remotepath = ['http://diglossa.org:5984/', dname].join('')\n        let remoteDB = new PouchDB(remotepath)\n        return remoteDB.info()\n      })).then(function(res) {\n        let dbinfo = res.map(info=> { return {dname: info.db_name, size: info.doc_count} })\n        return dbinfo\n      })\n    })\n}\n\nexport function replicate(upath, dname) {\n  let localpath = path.resolve(upath, 'pouch', dname)\n  let localDB = new PouchDB(localpath)\n  let dumppath = ['http://diglossa.org/dump-', dname].join('')\n  let remotepath = ['http://diglossa.org:5984/', dname].join('')\n\n  return localDB.load(dumppath)\n    .then(function() {\n      let opts = { live: true, retry: true }\n      localDB.sync(remotepath, opts)\n        .on('change', onSyncChange)\n        .on('error', onSyncError)\n      localDB.dname = dname\n      dbs.push(localDB)\n      // let dnames = dbs.map(db=>{ return db.dname })\n      setCfg(dname)\n    })\n}\n\nfunction onSyncChange(data) {  } // log('onSyncChange', data)\nfunction onSyncError() { log('onSyncError') }\n\nfunction setDBs(cfg) {\n  let upath = settings.get('upath')\n  cfg.forEach((dict, idx) => {\n    if (!dict.active) return\n    let dpath = path.resolve(upath, 'pouch', dict.dname)\n    let pouch = new PouchDB(dpath)\n    pouch.dname = dict.dname\n    pouch.weight = idx\n    dbs.push(pouch)\n  })\n  let dnames = dbs.map(db=>{ return db.dname })\n  return dnames\n}\n\nexport function ensureCfg(upath) {\n  let cfg = settings.get('cfg')\n  if (cfg) {\n    setDBs(cfg)\n  } else {\n    cfg = []\n    settings.set('cfg', cfg)\n    let pouchpath = path.resolve(upath, 'pouch')\n    fse.ensureDirSync(pouchpath)\n  }\n}\n\nfunction setCfg(dname) {\n  let upath = settings.get('upath')\n  let cfg = settings.get('cfg')\n  let check = _.find(cfg, dict=> { return dict.dname == dname })\n  if (check) return cfg\n  let newdict = {dname: dname, active: true, idx: cfg.length} // sync: remotepath,\n  cfg.push(newdict)\n  settings.set('cfg', cfg)\n  return cfg\n}\n\nfunction delCfg(dname) {\n  let upath = settings.get('upath')\n  let cfg = settings.get('cfg')\n  cfg = _.filter(cfg, dict=> { return dict.dname != dname})\n  settings.set('cfg', cfg)\n  return cfg\n}\n\nexport function infoDB(dname) {\n  let upath = settings.get('upath')\n  let localpath = path.resolve(upath, 'pouch', dname)\n  let db = _.find(dbs, db=> { return db.dname == dname })\n  db.info()\n    .then(function(info) {\n      log('INFO', info)\n    })\n\n}\n\nexport function cleanupDB(upath, cb) {\n  let pouchpath = path.resolve(upath, 'pouch')\n  try {\n    dbs = []\n    fse.removeSync(pouchpath)\n    fse.ensureDirSync(pouchpath)\n    settings.set('cfg', [])\n    cb(true)\n  } catch (err) {\n    console.log('ERR re-creating DBs', err)\n    cb(false)\n    // app.quit()\n  }\n}\n\nexport function queryDBs (query) {\n  let pdchs = segmenter(query.str)\n  let keys\n  let keyres = totalKeys(pdchs)\n  if (query.compound) keys = _.filter(keyres.main, key=> { return key != query.str})\n  else keys =  _.uniq(keyres.main.concat(keyres.added))\n  let dnames = dbs.map(db=> { return db.dname })\n\n  return Promise.all(dbs.map(function (db) {\n    return db.allDocs({\n      keys: keys,\n      include_docs: true\n    })\n      .then(function (res) {\n        if (!res || !res.rows) throw new Error('no dbn result')\n        let rdocs = _.compact(res.rows.map(row => { return row.doc }))\n        let docs = _.flatten(_.compact(rdocs.map(rdoc => { return rdoc.docs })))\n        docs.forEach(doc => { doc.dname = db.dname, doc.weight = db.weight })\n        return docs\n      })\n      .catch(function (err) {\n        console.log('ERR GET DBs', err)\n      })\n  }))\n    .then(function (res) {\n      let docs =_.flatten(res)\n      let chain = compactDocs(docs, pdchs)\n      query.chain = chain\n      return query\n    })\n}\n\n// function selectTib(datapath, files) {\n//   let tibs = []\n//   let tibkey = {}\n//   files.forEach(fname => {\n//     let fpath = path.resolve(datapath, fname)\n//     if (fname == 'localDict.csv' || fname == 'unprocessed.csv') return\n//     let text = fse.readFileSync(fpath,'utf8').trim()\n//     let rows = text.split('\\n')\n//     rows = _.compact(rows)\n//     rows.forEach((row, idx)=> {\n//       let clean = cleanStr(row)\n//       // if (idx > 0) return\n//       let gpars = sband(clean, code)\n//       if (!gpars) return\n//       gpars.forEach(gpar=> {\n//         gpar.forEach(span=> {\n//           if (span.lang != code) return\n//           let wfs = span.text.split(' ')\n//           wfs.forEach(wf=> {\n//             wf = wf.replace(retsek, '')\n//             if (tibkey[wf]) return\n//             tibs.push(wf)\n//             tibkey[wf] = true\n//           })\n//         })\n//       })\n//     })\n//   })\n//   return tibs\n// }\n\n// function cleanStr(row) {\n//   let clean = row.trim()\n//   clean = clean.trim().replace(/\\.$/, '')\n//   return clean\n// }\n\n// let query = {keys: keys, pdchs: pdchs, compound: compound, lastsek: lastsek}\nexport function compactDocs(docs, pdchs) {\n  let res = makeChains(pdchs, docs)\n  let chains = res.chains\n  // log('FULL, CHAINS', res.full, chains.length, chains)\n  let chain\n  if (chains.length > 1) chain = commonParts(chains)\n  else if (chains.length == 1) chain = chains[0]\n  return chain\n}\n\n\nfunction commonParts(chains) {\n  let first = chains[0]\n  let clean = []\n  let ambitmp\n  for (let idx = 0; idx < first.length; idx++) {\n    let segs = chains.map(segs=> { return segs[idx].seg })\n    if (_.uniq(segs).length == 1) {\n      clean.push(first[idx])\n      ambitmp = null\n    } else {\n      if (!ambitmp) ambitmp = {ambi: true, seg: '', docs: []}, clean.push(ambitmp)\n      let segdocs = chains.map(segs=> { return {seg: segs[idx].seg, docs: segs[idx].docs}  })\n      ambitmp.docs.push(segdocs)\n    }\n  }\n  let ambis = _.filter(clean, seg=> { return seg.ambi })\n  ambis.forEach(ambi=>{\n    let first = ambi.docs[0]\n    let chains = []\n    for (let idx = 0; idx < first.length; idx++) {\n      let chain = ambi.docs.map(adocs=> { return adocs[idx] })\n      chains.push(chain)\n    }\n    ambi.chains = chains\n    let chain = chains[0]\n    ambi.seg = chain.map(seg=>{ return seg.seg}).join(tsek)\n  })\n  return clean\n}\n\nfunction makeChains(pdchs, docs) {\n  let chains = []\n  let fulls = []\n  pdchs.forEach(segs=>{\n    let chain = []\n    let any = false\n    let full = true\n    segs.forEach(seg=>{\n      let segdocs = _.filter(docs, doc => { return startWith(seg, doc.dict) })\n      if (segdocs.length) any = true\n      if (!segdocs.length) full = false\n      let doc = {seg: seg, docs: segdocs}\n      chain.push(doc)\n    })\n    if (any) chains.push(chain)\n    if (full) fulls.push(chain)\n  })\n  // здесь full только для справки, убрать!!!\n  let bests, full\n  if (fulls.length) bests = selectBests(fulls), full = true\n  else bests = selectBests(chains)\n  return {chains: bests, full: full}\n}\n\nfunction selectBests(chains) {\n  let max = _.max(chains.map(chain => {  return _.sum(chain.map(segment => { return segment.docs.length ? segment.seg.length : 0 }))/chain.length } ) )\n  let longests = _.filter(chains, chain => { return _.sum(chain.map(segment => { return segment.docs.length ? segment.seg.length : 0 }))/chain.length >= max - 1 })\n  // let max = _.max(chains.map(chain => {  return _.sum(chain.map(segment => { return segment.docs.length ? Math.pow(segment.seg.length, 2) : 0 }))/chain.length } ) )\n  // let longests = _.filter(chains, chain => { return _.sum(chain.map(segment => { return segment.docs.length ? Math.pow(segment.seg.length, 2) : 0 }))/chain.length >= max - 10 })\n\n  let min = _.min(longests.map(chain => {  return chain.length } ) )\n  let shortests  = _.filter(longests, chain => { return chain.length == min })\n  return shortests\n}\n\nfunction startWith(str, head) {\n  if (str == head) return true\n  let reh = new RegExp('^' + head)\n  let tail = str.replace(reh, '')\n  return (str != tail && tibsuff.includes(tail)) ?  true : false\n}\n\nfunction fullChains(chains) {\n  let fulls = []\n  chains.forEach(segs => {\n    let full = true\n    segs.forEach(seg => {\n      if (!seg.docs.length) full = false\n    })\n    if (full) fulls.push(segs)\n  })\n  return fulls\n}\n\n// =============== CSV\n\nexport function importCSV(jsonpath, cb) {\n  let dname, dpath\n  fse.readJson(jsonpath)\n    .then(function(manifest) {\n      let upath = settings.get('upath')\n      dname = manifest.name\n      dpath = path.resolve(upath, 'pouch', dname)\n      return csv2pouch(jsonpath, dpath)\n        .on('finish', function (err) {\n          let csvDB = new PouchDB(dpath)\n          csvDB.dname = dname\n          dbs.push(csvDB)\n          setCfg(dname)\n          // let cfg = settings.get('cfg')\n          cb(true)\n        })\n        .on('error', function (err) {\n          throw new Error()\n        })\n    })\n    .catch(function(err) {\n      let cfg = settings.get('cfg')\n      log('IMP ERR CFG', cfg)\n      // console.log('IMPORT .ON ERR', err)\n      dbs = _.filter(dbs, db=> { return db.dname != dname })\n      delCfg(dname)\n      cb(false)\n    })\n}\n\nexport function exportCSV(csvname, cb) {\n  let db = _.find(dbs, db=> { return db.dname == csvname })\n  db.allDocs({\n    include_docs: true,\n    startkey: startkey,\n    endkey: endkey\n  }).then(function (res) {\n    let docs = res.rows.map(row=> { return row.doc })\n    let csv = ''\n    docs.forEach(doc=> {\n      let head = doc._id\n      let trns = doc.docs.map(rdoc=> { return rdoc.trns })\n      let trn = _.flatten(trns).join(';')\n      let commas = trn.split(',')\n      let value = (commas.length > 1) ? JSON.stringify(trn) : trn\n      let str = [head, value].join(',')\n      str = [str, '\\n'].join('')\n      csv += str\n    })\n    let upath = settings.get('upath')\n    let filename = [csvname, 'csv'].join('.')\n    let manifest = [csvname, 'json'].join('.')\n    let filepath = path.resolve(upath, filename)\n    let manipath = path.resolve(upath, manifest)\n    fse.writeFile(filepath, csv, function(err) {\n      if (err) log('ERRR', err)\n      if (err) return cb(false)\n      db.get('description')\n        .then(function(doc) {\n          fse.writeJson(manipath, doc)\n            .then(() => {\n              cb(true)\n              // return true\n            })\n            .catch(err => {\n              console.error('JSONERR', err)\n              cb(false)\n              // return false\n            })\n        })\n    })\n  })\n}\n\n// =====================  glob CSV\n\n// let localDictPath\n// let dicts = []\n// export function scanLocalDict___(datapath) {\n//   let dictpath = path.resolve(__dirname, datapath)\n//   let files = []\n//   // let pattern = '**/*\\.tib*'\n//   let pattern = '**/*'\n//   let options = {cwd: dictpath, nodir: true}\n//   glob(pattern, options, function(err, files) {\n//     let wfs = selectTib(dictpath, files)\n//     let queries = wfs.map(wf=> { return {str: wf}})\n//     // queries = queries.slice(0, 10)\n\n//     let csvname = 'localDict.csv'\n//     localDictPath = path.resolve(dictpath, csvname)\n//     fse.removeSync(localDictPath)\n\n//     return queries.forEach(query=> {\n//       recQuery(query)\n//         .catch(function(err) {\n//           console.log('Q-ERR', err)\n//         })\n//     })\n//   })\n// }\n\n// function recQuery(query) {\n//   function decide(aquery) {\n//     if (!aquery.chain) return dicts\n//     aquery.chain.forEach(sec=> {\n//       if (sec.docs.length) saveChunk(sec.seg) //dicts.push(sec.seg)\n//       else {\n//         if (query.str != sec.seg) return recQuery({ str: sec.seg })\n//       }\n//     })\n//   }\n//   return queryDBs(query).then(decide);\n// }\n\n// function saveChunk(seg) {\n//   let csv = [seg, ', -\\n'].join('')\n//   fse.appendFile(localDictPath, csv, function(err) {\n//     if (err) console.log('CSVERR', err)\n//   })\n// }\n\nexport function scanDirectory(globpath) {\n  log('SCAN', globpath)\n  glob2csv(globpath)\n\n}\n","// This is main process of Electron, started as first thing when your\n// app starts. It runs through entire life of your application.\n// It doesn't have any windows which you can see on screen, but we can open\n// window from here.\n\nimport _ from 'lodash'\nimport path from \"path\";\nimport url from \"url\"\nimport { app, BrowserWindow, Menu, ipcMain, globalShortcut } from \"electron\"\nimport { libMenuTemplate } from \"./menu/lib_menu_template\"\nimport { aboutMenuTemplate } from \"./menu/about_menu_template\"\nimport { dictMenuTemplate } from \"./menu/dict_menu_template\"\nimport { helpMenuTemplate } from \"./menu/help_menu_template\"\n\nimport { ensureCfg, replicate, infoDB, remoteDicts, queryDBs, scanDirectory, importCSV, exportCSV, cleanupDB } from \"./dbs/pouch\"\n\nimport { devMenuTemplate } from \"./menu/dev_menu_template\"\nimport { editMenuTemplate } from \"./menu/edit_menu_template\"\nconst settings = require('electron-settings')\nconst log = console.log\n\nimport env from \"env\"\n\nconst setApplicationMenu = () => {\n  // const menus = [libMenuTemplate, fileMenuTemplate, aboutMenuTemplate, authMenuTemplate, helpMenuTemplate]\n  const menus = [libMenuTemplate, dictMenuTemplate, aboutMenuTemplate, helpMenuTemplate]\n  if (env.name !== \"production\") {\n    // menus.push(devMenuTemplate)\n  }\n  Menu.setApplicationMenu(Menu.buildFromTemplate(menus))\n}\n\n// Save userData in separate folders for each environment.\n// Thanks to this you can use production and development versions of the app\n// on same machine like those are two separate apps.\nif (env.name !== \"production\") {\n  const userDataPath = app.getPath(\"userData\")\n  app.setPath(\"userData\", `${userDataPath} (${env.name})`)\n}\n\napp.on(\"ready\", () => {\n  setApplicationMenu()\n\n  let opts = {webPreferences: {\n    nodeIntegration: true\n  }}\n\n  const win = new BrowserWindow(opts)\n\n  let winBounds = settings.get('winBounds') || win.getBounds()\n  winBounds.y -= 21\n\n  win.setBounds(winBounds)\n\n  win.loadURL(\n    url.format({\n      pathname: path.join(__dirname, \"app.html\"),\n      protocol: \"file:\",\n      slashes: true\n    })\n  )\n\n  if (env.name === \"development\") {\n    win.openDevTools()\n  }\n\n  win.webContents.on('did-finish-load', () => {\n    let pckg = require('../package.json')\n    let name = pckg.name\n    let version = pckg.version\n    win.webContents.send('version', version )\n    win.setTitle([name, 'v.', version].join(' '))\n  })\n\n  win.on('resize', function () {\n    win.webContents.send('reload')\n  })\n\n  win.on('close', () => {\n    settings.set('winBounds', win.getBounds())\n  })\n\n  // globalShortcut.register('CommandOrControl+R', () => win.webContents.send('reread'))\n  // globalShortcut.register('CommandOrControl+Shift+R', () => win.reload())\n  globalShortcut.register('CommandOrControl+R', () => win.reload())\n\n  const apath = app.getAppPath()\n  const upath = app.getPath(\"userData\")\n  settings.set('apath', apath)\n  settings.set('upath', upath)\n\n  ensureCfg(upath)\n\n  ipcMain.on('infoDB', (event, dname) => {\n    infoDB(dname)\n  })\n\n  ipcMain.on('queryDBs', (event, query) => {\n    queryDBs(query)\n      .then(function(query) {\n        event.sender.send('replyDBs', query)\n      })\n  })\n\n  ipcMain.on('importCSV', (event, jsonpath) => {\n    // log('CSVIMPORT', importCSV(jsonpath))\n    importCSV(jsonpath, function(res) {\n      event.sender.send('csvImportReply', res)\n    })\n      // .then(function(rdbs) {\n      //   log('__true')\n      //   event.sender.send('csvImportReply', true)\n      // })\n      // .catch(function (err) {\n      //   log('__false')\n      //   event.sender.send('csvImportReply', false)\n      // });\n\n      // .on('finish', function (err) {\n      //   event.sender.send('csvImportReply', true)\n      // })\n      // .on('error', function (err) {\n      //   event.sender.send('csvImportReply', false)\n      // })\n  })\n\n  ipcMain.on('exportCSV', (event, csvname) => {\n    exportCSV(csvname, function(res) {\n      event.sender.send('csvExportReply', res)\n    })\n  })\n\n  ipcMain.on('scanDirectory', (event, globpath) => {\n    scanDirectory(globpath)\n    // event.sender.send('scanReply', datapath)\n    // .then(function(res) {\n    // })\n  })\n\n  ipcMain.on('remoteDicts', (event, query) => {\n    remoteDicts()\n      .then(function(rdbs) {\n        rdbs = _.filter(rdbs, dname=> { return dname[0] != '_' })\n        event.sender.send('remoteDictsReply', rdbs)\n      })\n      .catch(function (err) {\n        event.sender.send('remoteDictsReply', false)\n      });\n  })\n\n  ipcMain.on('replicate', (event, dname) => {\n    replicate(upath, dname)\n      .then(function (res) {\n        event.sender.send('replicateReply', true)\n      }).catch(function (err) {\n        event.sender.send('replicateReply', false)\n      });\n  })\n\n  ipcMain.on('cleanupDB', (event, datapath) => {\n    cleanupDB(upath, function(res) {\n      event.sender.send('cleanupReply', res)\n    })\n  })\n\n})\n\napp.on(\"window-all-closed\", () => {\n  app.quit()\n})\n"],"sourceRoot":""}